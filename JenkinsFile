#!/usr/bin/groovy

node {
    def root = pwd()
    def mvn = tool 'M3'
    def zapHome = tool 'ZAProxy_v2_5_0'
    def nodejs = tool 'NodeJS_6'
    stage("Setup") {
        deleteDir()
        if(env.GITLAB_CREDS) {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
        } else {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
        }
    }
    def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true)
    appvers = appvers.trim()
    def appName = "bf-ui-${appvers}"
    if(params.SIDECAR_CONFIG_REPO) {
        stage("Security Env Extra Configs") {
            sh "mkdir -p .sec-configs"
            dir ("./.sec-configs") {
                git url: "${env.SIDECAR_CONFIG_REPO}", branch: "master", credentialsId: "${env.GITLAB_CREDS}"
                sh "cp ./uc-deploy/* ../"
            }
        }
    }
    stage("Dependency Check") {
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              /jslave/dependency-check/dependency-check/bin/dependency-check.sh --version
              /jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "bf-ui" --scan "." --format "XML" --enableExperimental --disableBundleAudit
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
    }
    /*stage("Fortify Scans") {
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              /opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} '**/*.js' -exclude 'test/*.js' -exclude package.json -exclude 'node_modules/**/*.js' -exclude 'public/js/**/*.js'
              /opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
    }*/
    stage("Sonar") {
        sh """
          ./node_modules/.bin/tsc
          cp report/coverage/lcov.info report/coverage/lcov.info~
          sed -E 's/\\.tsx?\$/.js/' report/coverage/lcov.info~ > report/coverage/lcov.info
        """
        withCredentials([
          string(credentialsId: "${env.SONAR_TOKEN}", variable: "USERNAME")
        ]) {
            def sonar = tool 'SonarQube Runner 2.8'
            def projectId = "venicegeo:beachfront:bf-ui"
            sh "${sonar}/bin/sonar-scanner -Dsonar.javascript.lcov.reportPath=report/coverage/lcov.info -Dsonar.host.url=${env.SONAR_URL} -Dsonar.projectKey=${projectId} -Dsonar.projectName=${projectId} -Dsonar.language=js -Dsonar.sources=public/app -Dsonar.tests=test -Dsonar.projectBaseDir=${root} -Dsonar.projectVersion=${appvers} -Dsonar.login=${USERNAME}"
        }
    }
    stage("Archive") {
        def archiveName = "bf-ui.tgz"
        def getDependencyStatus = sh(script: """mvn --quiet --settings ~/.m2/settings.xml dependency:get -Dmaven.repo.local="${root}/.m2/repository" -DrepositoryId=nexus -DartifactId=bf-ui -Dversion=${appvers} -DgroupId="org.venice.piazza" -Dpackaging=tgz -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" >> /dev/null 2>&1""", returnStatus: true)
        if(getDependencyStatus == 0) {
            echo "Artifact version ${appvers} exists in Nexus, nothing to do"
        } else {
            withEnv([
              "PATH+=${nodejs}/bin",
              "NODE_ENV=production"
            ]) {
                sh """
                  npm install
                  ./node_modules/.bin/typings install
                  npm run build
                  cp nginx.conf dist/
                  ls
                  exit 1
                  tar -czf ${archiveName} -C ${root} src
                """
            }
            sh "mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} -DrepositoryId=nexus	-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" -DgroupId="org.venice.piazza" -DgeneratePom=false -Dpackaging=tgz -Dmaven.repo.local="${root}/.m2/repository" -DartifactId=bf-ui -Dversion=${appvers}"
        }
    }
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf start ${appName}
                """
            }
        }
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              mkdir -p ${root}/zap-out
              ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN}
              cat ${root}/zap-out/zap.xml
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"bf-ui \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bf-ui"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
    stage("Phase Two Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start
                  cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_SPACE}
                  cf start ${appName}
                """
            }
        }
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              mkdir -p ${root}/zap-out
              ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_TWO_PCF_SPACE}
              cat ${root}/zap-out/zap.xml
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"bf-ui \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname bf-ui"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
}
